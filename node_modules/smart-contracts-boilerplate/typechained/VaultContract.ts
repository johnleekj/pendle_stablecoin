/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface VaultContractInterface extends ethers.utils.Interface {
  functions: {
    "DEBT_CEILING()": FunctionFragment;
    "FLAT_FEE()": FunctionFragment;
    "INTEREST_PER_MONTH()": FunctionFragment;
    "INTEREST_PER_MONTH_PRECISION()": FunctionFragment;
    "LIQUIDATION_THRESHOLD()": FunctionFragment;
    "LIQUIDATION_THRESHOLD_PRECISION()": FunctionFragment;
    "LOAN_TO_VALUE()": FunctionFragment;
    "LOAN_TO_VALUE_PRECISION()": FunctionFragment;
    "addCollateral(uint256)": FunctionFragment;
    "borrowKhooleeCoins(uint256)": FunctionFragment;
    "getDebtCeiling()": FunctionFragment;
    "getUserBorrowed(address)": FunctionFragment;
    "removeCollateral(uint256)": FunctionFragment;
    "repayDebt()": FunctionFragment;
    "returnHealthFactor()": FunctionFragment;
    "totalBorrow()": FunctionFragment;
    "totalCollateral()": FunctionFragment;
    "userBorrowed(address)": FunctionFragment;
    "userCollateral(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEBT_CEILING",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "FLAT_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "INTEREST_PER_MONTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INTEREST_PER_MONTH_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATION_THRESHOLD_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LOAN_TO_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LOAN_TO_VALUE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowKhooleeCoins",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtCeiling",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBorrowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "repayDebt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "returnHealthFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userBorrowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userCollateral",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEBT_CEILING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FLAT_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "INTEREST_PER_MONTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INTEREST_PER_MONTH_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATION_THRESHOLD_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LOAN_TO_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LOAN_TO_VALUE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowKhooleeCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "returnHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCollateral",
    data: BytesLike
  ): Result;

  events: {};
}

export interface VaultContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEBT_CEILING(overrides?: CallOverrides): Promise<[BigNumber]>;

    FLAT_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    INTEREST_PER_MONTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    INTEREST_PER_MONTH_PRECISION(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    LIQUIDATION_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;

    LIQUIDATION_THRESHOLD_PRECISION(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    LOAN_TO_VALUE(overrides?: CallOverrides): Promise<[BigNumber]>;

    LOAN_TO_VALUE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    addCollateral(
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowKhooleeCoins(
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDebtCeiling(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserBorrowed(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeCollateral(
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnHealthFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBorrow(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    userBorrowed(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    userCollateral(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  DEBT_CEILING(overrides?: CallOverrides): Promise<BigNumber>;

  FLAT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  INTEREST_PER_MONTH(overrides?: CallOverrides): Promise<BigNumber>;

  INTEREST_PER_MONTH_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  LIQUIDATION_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  LIQUIDATION_THRESHOLD_PRECISION(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  LOAN_TO_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  LOAN_TO_VALUE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  addCollateral(
    collateralAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowKhooleeCoins(
    borrowAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDebtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

  getUserBorrowed(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  removeCollateral(
    collateralAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayDebt(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnHealthFactor(overrides?: CallOverrides): Promise<BigNumber>;

  totalBorrow(overrides?: CallOverrides): Promise<BigNumber>;

  totalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  userBorrowed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  userCollateral(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DEBT_CEILING(overrides?: CallOverrides): Promise<BigNumber>;

    FLAT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    INTEREST_PER_MONTH(overrides?: CallOverrides): Promise<BigNumber>;

    INTEREST_PER_MONTH_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION_THRESHOLD_PRECISION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LOAN_TO_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    LOAN_TO_VALUE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    addCollateral(
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowKhooleeCoins(
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getDebtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    getUserBorrowed(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeCollateral(
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repayDebt(overrides?: CallOverrides): Promise<void>;

    returnHealthFactor(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrow(overrides?: CallOverrides): Promise<BigNumber>;

    totalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    userBorrowed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userCollateral(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    DEBT_CEILING(overrides?: CallOverrides): Promise<BigNumber>;

    FLAT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    INTEREST_PER_MONTH(overrides?: CallOverrides): Promise<BigNumber>;

    INTEREST_PER_MONTH_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION_THRESHOLD_PRECISION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LOAN_TO_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    LOAN_TO_VALUE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    addCollateral(
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowKhooleeCoins(
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDebtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    getUserBorrowed(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeCollateral(
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnHealthFactor(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrow(overrides?: CallOverrides): Promise<BigNumber>;

    totalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    userBorrowed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userCollateral(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEBT_CEILING(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FLAT_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INTEREST_PER_MONTH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INTEREST_PER_MONTH_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIQUIDATION_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIQUIDATION_THRESHOLD_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LOAN_TO_VALUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LOAN_TO_VALUE_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addCollateral(
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowKhooleeCoins(
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDebtCeiling(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserBorrowed(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeCollateral(
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnHealthFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBorrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userBorrowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userCollateral(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
