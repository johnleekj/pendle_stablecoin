/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { VaultContract, VaultContractInterface } from '../VaultContract';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'khooleeToken',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'mockOT',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'collateralAmount',
        type: 'uint256',
      },
    ],
    name: 'addCollateral',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'borrowAmount',
        type: 'uint256',
      },
    ],
    name: 'borrowKhooleeCoins',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getDebtCeiling',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'collateralAmount',
        type: 'uint256',
      },
    ],
    name: 'removeCollateral',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'repayDebt',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'returnHealthFactor',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalBorrow',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalCollateral',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'userBorrowed',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'userCollateral',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50604051610bf8380380610bf883398101604081905261002f9161007c565b600480546001600160a01b039384166001600160a01b031991821617909155600580549290931691161790556100ae565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008e578182fd5b61009783610060565b91506100a560208401610060565b90509250929050565b610b3b806100bd6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638285ef40116100665780638285ef40146100f957806394cd4ba7146101015780639a7d781314610109578063bcc46e831461011c578063f69f1e4a1461012f5761009e565b8063082151e7146100a35780631b99d9d6146100c15780633237c158146100cb57806332564042146100de5780634ac8eb5f146100f1575b600080fd5b6100ab610142565b6040516100b89190610964565b60405180910390f35b6100c96101d2565b005b6100c96100d936600461084c565b610339565b6100c96100ec36600461084c565b61041e565b6100ab61058f565b6100ab610595565b6100ab61059b565b6100ab610117366004610805565b6105a0565b6100c961012a36600461084c565b6105b2565b6100ab61013d366004610805565b610736565b3360009081526003602052604081205461015e575060646101cf565b6000600a6101c1610173604b60646002610748565b61017b61079c565b336000908152600260205260409020546101959190610ab9565b61019f9190610ab9565b336000908152600360205260409020546101ba906064610ab9565b6002610748565b6101cb9190610985565b9150505b90565b3360008181526003602052604090819020546004805492516370a0823160e01b815291936001600160a01b03909316926370a0823192610212920161087c565b60206040518083038186803b15801561022a57600080fd5b505afa15801561023e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102629190610864565b10156102895760405162461bcd60e51b8152600401610280906108cd565b60405180910390fd5b33600081815260036020526040908190205460048054925163079cc67960e41b815291936001600160a01b03909316926379cc6790926102cb928691016108b4565b600060405180830381600087803b1580156102e557600080fd5b505af11580156102f9573d6000803e3d6000fd5b505033600090815260036020526040812055505060015461031a90826107b1565b6001553360009081526002602052604090205461033690610339565b50565b3360009081526002602052604090205481111561035557600080fd5b60055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061038790339085906004016108b4565b602060405180830381600087803b1580156103a157600080fd5b505af11580156103b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d9919061082c565b50336000908152600260205260409020546103f490826107b1565b336000908152600260205260408120919091555461041290826107b1565b600055610336336107bd565b6000600a6064603261042e61079c565b336000908152600260205260409020546104489190610ab9565b6104529190610ab9565b61045c9190610985565b6104669190610985565b336000908152600360205260409020549091508190610485908461096d565b11156104a35760405162461bcd60e51b8152600401610280906108fa565b33600090815260036020526040902054600154601491906104c590859061096d565b6104cf919061096d565b11156104ed5760405162461bcd60e51b81526004016102809061092f565b600480546040516340c10f1960e01b81526001600160a01b03909116916340c10f199161051e9133918791016108b4565b600060405180830381600087803b15801561053857600080fd5b505af115801561054c573d6000803e3d6000fd5b50503360009081526003602052604090205461056b92509050836107df565b3360009081526003602052604090205560015461058890836107df565b6001555050565b60005481565b60015481565b601490565b60036020526000908152604090205481565b60006105bc61079c565b6105c86014600a610ab9565b6105d29190610985565b90506105de818361096d565b6005546040516370a0823160e01b81526001600160a01b03909116906370a082319061060e90339060040161087c565b60206040518083038186803b15801561062657600080fd5b505afa15801561063a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065e9190610864565b101561066957600080fd5b6005546001600160a01b03166323b872dd3330610686858761096d565b6040518463ffffffff1660e01b81526004016106a493929190610890565b602060405180830381600087803b1580156106be57600080fd5b505af11580156106d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f6919061082c565b503360009081526002602052604090205461071190836107df565b336000908152600260205260408120919091555461072f90836107df565b6000555050565b60026020526000908152604090205481565b60008061075683600161096d565b61076190600a6109eb565b61076b9086610ab9565b90506000600a61077b8684610985565b61078690600561096d565b6107909190610985565b925050505b9392505050565b60006107ac6008600a6001610748565b905090565b60006107958284610ad8565b600060646107c9610142565b10905080156107db576107db826107eb565b5050565b6000610795828461096d565b6001600160a01b0316600090815260026020526040812055565b600060208284031215610816578081fd5b81356001600160a01b0381168114610795578182fd5b60006020828403121561083d578081fd5b81518015158114610795578182fd5b60006020828403121561085d578081fd5b5035919050565b600060208284031215610875578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b602080825260139082015272496e73756666696369656e7420546f6b656e7360681b604082015260600190565b6020808252818101527f426f72726f7720416d6f756e742061626f76652044656274204365696c696e67604082015260600190565b6020808252818101527f426f72726f7720416d6f756e742041626f76652044656274204365696c696e67604082015260600190565b90815260200190565b6000821982111561098057610980610aef565b500190565b6000826109a057634e487b7160e01b81526012600452602481fd5b500490565b80825b60018086116109b757506109e2565b8187048211156109c9576109c9610aef565b808616156109d657918102915b9490941c9380026109a8565b94509492505050565b60006107956000198484600082610a0457506001610795565b81610a1157506000610795565b8160018114610a275760028114610a3157610a5e565b6001915050610795565b60ff841115610a4257610a42610aef565b6001841b915084821115610a5857610a58610aef565b50610795565b5060208310610133831016604e8410600b8410161715610a91575081810a83811115610a8c57610a8c610aef565b610795565b610a9e84848460016109a5565b808604821115610ab057610ab0610aef565b02949350505050565b6000816000190483118215151615610ad357610ad3610aef565b500290565b600082821015610aea57610aea610aef565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220c3424b99b168723f77abe00fae8c41fcb71c32dead4650a370cc5678e90c902a64736f6c63430008000033';

type VaultContractConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: VaultContractConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VaultContract__factory extends ContractFactory {
  constructor(...args: VaultContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(khooleeToken: string, mockOT: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<VaultContract> {
    return super.deploy(khooleeToken, mockOT, overrides || {}) as Promise<VaultContract>;
  }
  getDeployTransaction(khooleeToken: string, mockOT: string, overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(khooleeToken, mockOT, overrides || {});
  }
  attach(address: string): VaultContract {
    return super.attach(address) as VaultContract;
  }
  connect(signer: Signer): VaultContract__factory {
    return super.connect(signer) as VaultContract__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultContractInterface {
    return new utils.Interface(_abi) as VaultContractInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): VaultContract {
    return new Contract(address, _abi, signerOrProvider) as VaultContract;
  }
}
