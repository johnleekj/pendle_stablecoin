/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface VaultContractInterface extends ethers.utils.Interface {
  functions: {
    'KhooleeCoinMinterContractAddress()': FunctionFragment;
    'SetMockOTContract(address)': FunctionFragment;
    'addCollateral(uint256)': FunctionFragment;
    'approveKhooleeTransfer(address,uint256)': FunctionFragment;
    'borrowKhooleeCoins(uint256)': FunctionFragment;
    'getDebtCeiling()': FunctionFragment;
    'removeCollateral(uint256)': FunctionFragment;
    'repayDebt()': FunctionFragment;
    'returnCurrentMsgSender()': FunctionFragment;
    'returnHealthFactor()': FunctionFragment;
    'totalBorrow()': FunctionFragment;
    'totalCollateral()': FunctionFragment;
    'userBorrowed(address)': FunctionFragment;
    'userCollateral(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'KhooleeCoinMinterContractAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SetMockOTContract', values: [string]): string;
  encodeFunctionData(functionFragment: 'addCollateral', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'approveKhooleeTransfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'borrowKhooleeCoins', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getDebtCeiling', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeCollateral', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'repayDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'returnCurrentMsgSender', values?: undefined): string;
  encodeFunctionData(functionFragment: 'returnHealthFactor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalBorrow', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalCollateral', values?: undefined): string;
  encodeFunctionData(functionFragment: 'userBorrowed', values: [string]): string;
  encodeFunctionData(functionFragment: 'userCollateral', values: [string]): string;

  decodeFunctionResult(functionFragment: 'KhooleeCoinMinterContractAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SetMockOTContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approveKhooleeTransfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowKhooleeCoins', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDebtCeiling', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'returnCurrentMsgSender', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'returnHealthFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalBorrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userBorrowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userCollateral', data: BytesLike): Result;

  events: {};
}

export interface VaultContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    KhooleeCoinMinterContractAddress(overrides?: CallOverrides): Promise<[string]>;

    SetMockOTContract(addr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    addCollateral(collateralAmount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    approveKhooleeTransfer(
      addr: string,
      approveAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowKhooleeCoins(borrowAmount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    getDebtCeiling(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeCollateral(collateralAmount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    repayDebt(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    returnCurrentMsgSender(overrides?: CallOverrides): Promise<[string]>;

    returnHealthFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBorrow(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    userBorrowed(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    userCollateral(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  KhooleeCoinMinterContractAddress(overrides?: CallOverrides): Promise<string>;

  SetMockOTContract(addr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  addCollateral(collateralAmount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  approveKhooleeTransfer(
    addr: string,
    approveAmt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowKhooleeCoins(borrowAmount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  getDebtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

  removeCollateral(collateralAmount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  repayDebt(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  returnCurrentMsgSender(overrides?: CallOverrides): Promise<string>;

  returnHealthFactor(overrides?: CallOverrides): Promise<BigNumber>;

  totalBorrow(overrides?: CallOverrides): Promise<BigNumber>;

  totalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  userBorrowed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  userCollateral(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    KhooleeCoinMinterContractAddress(overrides?: CallOverrides): Promise<string>;

    SetMockOTContract(addr: string, overrides?: CallOverrides): Promise<void>;

    addCollateral(collateralAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    approveKhooleeTransfer(addr: string, approveAmt: BigNumberish, overrides?: CallOverrides): Promise<void>;

    borrowKhooleeCoins(borrowAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getDebtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    removeCollateral(collateralAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    repayDebt(overrides?: CallOverrides): Promise<void>;

    returnCurrentMsgSender(overrides?: CallOverrides): Promise<string>;

    returnHealthFactor(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrow(overrides?: CallOverrides): Promise<BigNumber>;

    totalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    userBorrowed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userCollateral(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    KhooleeCoinMinterContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    SetMockOTContract(addr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    addCollateral(collateralAmount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    approveKhooleeTransfer(
      addr: string,
      approveAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowKhooleeCoins(borrowAmount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    getDebtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    removeCollateral(collateralAmount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    repayDebt(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    returnCurrentMsgSender(overrides?: CallOverrides): Promise<BigNumber>;

    returnHealthFactor(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrow(overrides?: CallOverrides): Promise<BigNumber>;

    totalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    userBorrowed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userCollateral(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    KhooleeCoinMinterContractAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SetMockOTContract(addr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    addCollateral(collateralAmount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    approveKhooleeTransfer(
      addr: string,
      approveAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowKhooleeCoins(borrowAmount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    getDebtCeiling(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeCollateral(collateralAmount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    repayDebt(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    returnCurrentMsgSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    returnHealthFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBorrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userBorrowed(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userCollateral(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
