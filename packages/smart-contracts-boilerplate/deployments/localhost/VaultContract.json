{
  "address": "0xc3e53F4d16Ae77Db1c982e75a937B9f60FE63690",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "khooleeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mockOT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DEBT_CEILING",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FLAT_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTEREST_PER_MONTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTEREST_PER_MONTH_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_THRESHOLD_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOAN_TO_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOAN_TO_VALUE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "addCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowKhooleeCoins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDebtCeiling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserBorrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "removeCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repayDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "returnHealthFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userBorrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xef0e12f706df92419f0e5e465b15e4b2241f49795a9e65cf8e5fec4f42111d9f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xc3e53F4d16Ae77Db1c982e75a937B9f60FE63690",
    "transactionIndex": 0,
    "gasUsed": "771255",
    "logsBloom": "0x
    "blockHash": "0x52362ea03a15a9c71cc1f0a210f25de6facfc995e21792c80da68fca30832991",
    "transactionHash": "0xef0e12f706df92419f0e5e465b15e4b2241f49795a9e65cf8e5fec4f42111d9f",
    "logs": [],
    "blockNumber": 32,
    "cumulativeGasUsed": "771255",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "0xE6E340D132b5f46d1e472DebcD681B2aBc16e57E"
  ],
  "solcInputHash": "cd6dfc0bfa3c422d0ed3fa023a6fd53e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"khooleeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mockOT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DEBT_CEILING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLAT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTEREST_PER_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTEREST_PER_MONTH_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_THRESHOLD_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOAN_TO_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOAN_TO_VALUE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowKhooleeCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"removeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repayDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnHealthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VaultContract.sol\":\"VaultContract\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/VaultContract.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\ninterface KhooleeCoinMinterInterface {\\n  function mint(address to, uint256 amount) external;\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function burnFrom(address account, uint256 amount) external;\\n}\\n\\ninterface MockOTInterface {\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function getStart() external view returns (uint256);\\n\\n  function getExpiry() external view returns (uint256);\\n}\\n\\ncontract VaultContract {\\n  using SafeMath for uint256;\\n\\n  uint256 public constant LOAN_TO_VALUE = 50; // 50% (max % of KLC that can be borrowed with deposited collateralAmount)\\n  uint256 public constant LOAN_TO_VALUE_PRECISION = 1e2; // 100\\n\\n  uint256 public constant LIQUIDATION_THRESHOLD = 75; // 75% (percentage at which a position is defined as under-collateralized)\\n  // collaterization rate is 100% if position is defined as under-collateralized\\n  uint256 public constant LIQUIDATION_THRESHOLD_PRECISION = 1e2; // 100\\n\\n  // this is incurred each time collateral is being added\\n  uint256 public constant FLAT_FEE = 20; // 20 usd worth of mockOT\\n\\n  // this is not being used for now\\n  uint256 public constant INTEREST_PER_MONTH = 4; // 4%\\n  uint256 public constant INTEREST_PER_MONTH_PRECISION = 1e2; // 100\\n\\n  uint256 public constant DEBT_CEILING = 20; // max amount of KLC that can be borrowed at any time\\n\\n  // Total amounts\\n  uint256 public totalCollateral; // Total collateral supplied\\n  uint256 public totalBorrow; // Total KhooleeCoin amount to be repayed by borrowers\\n\\n  // User balances\\n  mapping(address => uint256) public userCollateral; // collateral deposited by user of corresponding address\\n  mapping(address => uint256) public userBorrowed; //KhooleeCoin borrowed by user of corresponding address\\n\\n  KhooleeCoinMinterInterface _KhooleeToken;\\n  MockOTInterface _mockOT;\\n\\n  constructor(address khooleeToken, address mockOT) {\\n    _KhooleeToken = KhooleeCoinMinterInterface(khooleeToken);\\n    _mockOT = MockOTInterface(mockOT);\\n  }\\n\\n  // function mintMinerReward() public {\\n  //     _KhooleeToken.mint(block.coinbase, 1000);\\n  // }\\n\\n  function addCollateral(uint256 collateralAmount) public {\\n    uint256 flatFeeInMockOT = (FLAT_FEE * 10) / _getMockOtUSDValue();\\n    require(_mockOT.balanceOf(msg.sender) >= collateralAmount + flatFeeInMockOT);\\n    userCollateral[msg.sender] = userCollateral[msg.sender].add(collateralAmount);\\n    totalCollateral = totalCollateral.add(collateralAmount);\\n    _mockOT.transferFrom(msg.sender, address(this), collateralAmount + flatFeeInMockOT);\\n  }\\n\\n  function removeCollateral(uint256 collateralAmount) public {\\n    require(collateralAmount <= userCollateral[msg.sender]);\\n    userCollateral[msg.sender] = userCollateral[msg.sender].sub(collateralAmount);\\n    totalCollateral = totalCollateral.sub(collateralAmount);\\n    _mockOT.transfer(msg.sender, collateralAmount);\\n\\n    _liquidateWhenLiquidatableDebtPosition(msg.sender);\\n  }\\n\\n  function borrowKhooleeCoins(uint256 borrowAmount) public {\\n    // borrowed KhooleeCoins will be newly minted\\n    uint256 maxAmountThatCanBeBorrowed = (userCollateral[msg.sender] *\\n      _getMockOtUSDValue() *\\n      LOAN_TO_VALUE) /\\n      LOAN_TO_VALUE_PRECISION /\\n      10;\\n    require(\\n      borrowAmount + userBorrowed[msg.sender] <= maxAmountThatCanBeBorrowed,\\n      'Borrow Amount above Debt Ceiling'\\n    );\\n    require(\\n      totalBorrow + borrowAmount + userBorrowed[msg.sender] <= DEBT_CEILING,\\n      'Borrow Amount Above Debt Ceiling'\\n    );\\n\\n    userBorrowed[msg.sender] = userBorrowed[msg.sender].add(borrowAmount);\\n    totalBorrow = totalBorrow.add(borrowAmount);\\n    _KhooleeToken.mint(msg.sender, borrowAmount); // mints to the borrower\\n  }\\n\\n  function repayDebt() public {\\n    require(\\n      _KhooleeToken.balanceOf(msg.sender) >= userBorrowed[msg.sender],\\n      'Insufficient Tokens'\\n    );\\n    uint256 borrowAmount = userBorrowed[msg.sender];\\n\\n    // repayed stablecoins will be burnt\\n    userBorrowed[msg.sender] = 0;\\n    totalBorrow = totalBorrow.sub(borrowAmount);\\n    _KhooleeToken.burnFrom(msg.sender, borrowAmount);\\n\\n    removeCollateral(userCollateral[msg.sender]);\\n  }\\n\\n  function _liquidateWhenLiquidatableDebtPosition(address addressToLiquidate) private {\\n    // if health factor < 100, can liquidate collateral\\n    // else, collateral still safe\\n    bool liquidatable = returnHealthFactor() < 100;\\n    if (liquidatable) {\\n      _liquidate(addressToLiquidate);\\n    }\\n  }\\n\\n  function _liquidate(address addressToLiquidate) private {\\n    // make the borrower no longer have access to the collateral\\n    // uint256 amountToLiquidate = userCollateral[addressToLiquidate];\\n    userCollateral[addressToLiquidate] = 0;\\n    // not sure whether to update total collateral?\\n  }\\n\\n  // if health factor < 100, can liquidate collateral\\n  // else, collateral still safe\\n  function returnHealthFactor() public view returns (uint256) {\\n    if (userBorrowed[msg.sender] == 0) return 100;\\n    uint256 a = _percent(\\n      userCollateral[msg.sender] *\\n        _getMockOtUSDValue() *\\n        _percent(LIQUIDATION_THRESHOLD, LIQUIDATION_THRESHOLD_PRECISION, 2),\\n      userBorrowed[msg.sender] * 100,\\n      2\\n    ) / 10;\\n    return a;\\n    //return ((userCollateral[msg.sender] * LIQUIDATION_THRESHOLD / LIQUIDATION_THRESHOLD_PRECISION) / userBorrowed[msg.sender] *);\\n  }\\n\\n  //======================= Helper Methods ==========================================\\n  // supposed to be oracle to get value, but this will do for now\\n  function _getMockOtUSDValue() private pure returns (uint256) {\\n    return _percent(8, 10, 1);\\n  }\\n\\n  function _percent(\\n    uint256 numerator,\\n    uint256 denominator,\\n    uint256 precision\\n  ) private pure returns (uint256 quotient) {\\n    // caution, check safe-to-multiply here\\n    uint256 _numerator = numerator * 10**(precision + 1);\\n    // with rounding of last digit\\n    uint256 _quotient = ((_numerator / denominator) + 5) / 10;\\n    return (_quotient);\\n  }\\n\\n  function getDebtCeiling() public pure returns (uint256) {\\n    return DEBT_CEILING;\\n  }\\n\\n  function getUserBorrowed(address user) public view returns (uint256) {\\n    return userBorrowed[user];\\n  }\\n}\\n\",\"keccak256\":\"0x05b2f5cf8cffdccd5b52b0286926d9a8006d6c6b1f5f691264eea31dd443959d\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610cdd380380610cdd83398101604081905261002f9161007c565b600480546001600160a01b039384166001600160a01b031991821617909155600580549290931691161790556100ae565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008e578182fd5b61009783610060565b91506100a560208401610060565b90509250929050565b610c20806100bd6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063831a6350116100ad578063c42c6e3b11610071578063c42c6e3b14610144578063c55e6adf1461017c578063dda1b912146101d2578063e86ef40b146101da578063f69f1e4a146101ed57610121565b8063831a63501461014457806390a8ae9b1461019c57806394cd4ba7146101a45780639a7d7813146101ac578063bcc46e83146101bf57610121565b806332564042116100f45780633256404214610169578063424f04741461017c5780634ac8eb5f14610184578063788c047a1461018c5780638285ef401461019457610121565b8063082151e7146101265780630f7d6bed146101445780631b99d9d61461014c5780633237c15814610156575b600080fd5b61012e610200565b60405161013b9190610a49565b60405180910390f35b61012e610290565b610154610295565b005b610154610164366004610931565b6103f0565b610154610177366004610931565b6104d5565b61012e610645565b61012e61064a565b61012e610650565b61012e610655565b61012e61065b565b61012e610660565b61012e6101ba3660046108ea565b610665565b6101546101cd366004610931565b610677565b61012e6107fb565b61012e6101e83660046108ea565b610800565b61012e6101fb3660046108ea565b61081b565b3360009081526003602052604081205461021c5750606461028d565b6000600a61027f610231604b6064600261082d565b610239610881565b336000908152600260205260409020546102539190610b9e565b61025d9190610b9e565b33600090815260036020526040902054610278906064610b9e565b600261082d565b6102899190610a6a565b9150505b90565b606481565b3360008181526003602052604090819020546004805492516370a0823160e01b815291936001600160a01b03909316926370a08231926102d59201610961565b60206040518083038186803b1580156102ed57600080fd5b505afa158015610301573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103259190610949565b101561034c5760405162461bcd60e51b8152600401610343906109b2565b60405180910390fd5b336000908152600360205260408120805491905560015461036d9082610896565b6001556004805460405163079cc67960e41b81526001600160a01b03909116916379cc6790916103a1913391869101610999565b600060405180830381600087803b1580156103bb57600080fd5b505af11580156103cf573d6000803e3d6000fd5b5050336000908152600260205260409020546103ed925090506103f0565b50565b3360009081526002602052604090205481111561040c57600080fd5b336000908152600260205260409020546104269082610896565b33600090815260026020526040812091909155546104449082610896565b60005560055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906104799033908590600401610999565b602060405180830381600087803b15801561049357600080fd5b505af11580156104a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cb9190610911565b506103ed336108a2565b6000600a606460326104e5610881565b336000908152600260205260409020546104ff9190610b9e565b6105099190610b9e565b6105139190610a6a565b61051d9190610a6a565b33600090815260036020526040902054909150819061053c9084610a52565b111561055a5760405162461bcd60e51b8152600401610343906109df565b336000908152600360205260409020546001546014919061057c908590610a52565b6105869190610a52565b11156105a45760405162461bcd60e51b815260040161034390610a14565b336000908152600360205260409020546105be90836108c4565b336000908152600360205260409020556001546105db90836108c4565b600155600480546040516340c10f1960e01b81526001600160a01b03909116916340c10f199161060f913391879101610999565b600060405180830381600087803b15801561062957600080fd5b505af115801561063d573d6000803e3d6000fd5b505050505050565b601481565b60005481565b603281565b60015481565b604b81565b601490565b60036020526000908152604090205481565b6000610681610881565b61068d6014600a610b9e565b6106979190610a6a565b90506106a38183610a52565b6005546040516370a0823160e01b81526001600160a01b03909116906370a08231906106d3903390600401610961565b60206040518083038186803b1580156106eb57600080fd5b505afa1580156106ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107239190610949565b101561072e57600080fd5b3360009081526002602052604090205461074890836108c4565b336000908152600260205260408120919091555461076690836108c4565b6000556005546001600160a01b03166323b872dd33306107868587610a52565b6040518463ffffffff1660e01b81526004016107a493929190610975565b602060405180830381600087803b1580156107be57600080fd5b505af11580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f69190610911565b505050565b600481565b6001600160a01b031660009081526003602052604090205490565b60026020526000908152604090205481565b60008061083b836001610a52565b61084690600a610ad0565b6108509086610b9e565b90506000600a6108608684610a6a565b61086b906005610a52565b6108759190610a6a565b925050505b9392505050565b60006108916008600a600161082d565b905090565b600061087a8284610bbd565b600060646108ae610200565b10905080156108c0576108c0826108d0565b5050565b600061087a8284610a52565b6001600160a01b0316600090815260026020526040812055565b6000602082840312156108fb578081fd5b81356001600160a01b038116811461087a578182fd5b600060208284031215610922578081fd5b8151801515811461087a578182fd5b600060208284031215610942578081fd5b5035919050565b60006020828403121561095a578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b602080825260139082015272496e73756666696369656e7420546f6b656e7360681b604082015260600190565b6020808252818101527f426f72726f7720416d6f756e742061626f76652044656274204365696c696e67604082015260600190565b6020808252818101527f426f72726f7720416d6f756e742041626f76652044656274204365696c696e67604082015260600190565b90815260200190565b60008219821115610a6557610a65610bd4565b500190565b600082610a8557634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611610a9c5750610ac7565b818704821115610aae57610aae610bd4565b80861615610abb57918102915b9490941c938002610a8d565b94509492505050565b600061087a6000198484600082610ae95750600161087a565b81610af65750600061087a565b8160018114610b0c5760028114610b1657610b43565b600191505061087a565b60ff841115610b2757610b27610bd4565b6001841b915084821115610b3d57610b3d610bd4565b5061087a565b5060208310610133831016604e8410600b8410161715610b76575081810a83811115610b7157610b71610bd4565b61087a565b610b838484846001610a8a565b808604821115610b9557610b95610bd4565b02949350505050565b6000816000190483118215151615610bb857610bb8610bd4565b500290565b600082821015610bcf57610bcf610bd4565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220cadea68d28fc38a32bc6bf8e1273d640a64c708e6db95c53276d21ceb99e8b7664736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c8063831a6350116100ad578063c42c6e3b11610071578063c42c6e3b14610144578063c55e6adf1461017c578063dda1b912146101d2578063e86ef40b146101da578063f69f1e4a146101ed57610121565b8063831a63501461014457806390a8ae9b1461019c57806394cd4ba7146101a45780639a7d7813146101ac578063bcc46e83146101bf57610121565b806332564042116100f45780633256404214610169578063424f04741461017c5780634ac8eb5f14610184578063788c047a1461018c5780638285ef401461019457610121565b8063082151e7146101265780630f7d6bed146101445780631b99d9d61461014c5780633237c15814610156575b600080fd5b61012e610200565b60405161013b9190610a49565b60405180910390f35b61012e610290565b610154610295565b005b610154610164366004610931565b6103f0565b610154610177366004610931565b6104d5565b61012e610645565b61012e61064a565b61012e610650565b61012e610655565b61012e61065b565b61012e610660565b61012e6101ba3660046108ea565b610665565b6101546101cd366004610931565b610677565b61012e6107fb565b61012e6101e83660046108ea565b610800565b61012e6101fb3660046108ea565b61081b565b3360009081526003602052604081205461021c5750606461028d565b6000600a61027f610231604b6064600261082d565b610239610881565b336000908152600260205260409020546102539190610b9e565b61025d9190610b9e565b33600090815260036020526040902054610278906064610b9e565b600261082d565b6102899190610a6a565b9150505b90565b606481565b3360008181526003602052604090819020546004805492516370a0823160e01b815291936001600160a01b03909316926370a08231926102d59201610961565b60206040518083038186803b1580156102ed57600080fd5b505afa158015610301573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103259190610949565b101561034c5760405162461bcd60e51b8152600401610343906109b2565b60405180910390fd5b336000908152600360205260408120805491905560015461036d9082610896565b6001556004805460405163079cc67960e41b81526001600160a01b03909116916379cc6790916103a1913391869101610999565b600060405180830381600087803b1580156103bb57600080fd5b505af11580156103cf573d6000803e3d6000fd5b5050336000908152600260205260409020546103ed925090506103f0565b50565b3360009081526002602052604090205481111561040c57600080fd5b336000908152600260205260409020546104269082610896565b33600090815260026020526040812091909155546104449082610896565b60005560055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906104799033908590600401610999565b602060405180830381600087803b15801561049357600080fd5b505af11580156104a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cb9190610911565b506103ed336108a2565b6000600a606460326104e5610881565b336000908152600260205260409020546104ff9190610b9e565b6105099190610b9e565b6105139190610a6a565b61051d9190610a6a565b33600090815260036020526040902054909150819061053c9084610a52565b111561055a5760405162461bcd60e51b8152600401610343906109df565b336000908152600360205260409020546001546014919061057c908590610a52565b6105869190610a52565b11156105a45760405162461bcd60e51b815260040161034390610a14565b336000908152600360205260409020546105be90836108c4565b336000908152600360205260409020556001546105db90836108c4565b600155600480546040516340c10f1960e01b81526001600160a01b03909116916340c10f199161060f913391879101610999565b600060405180830381600087803b15801561062957600080fd5b505af115801561063d573d6000803e3d6000fd5b505050505050565b601481565b60005481565b603281565b60015481565b604b81565b601490565b60036020526000908152604090205481565b6000610681610881565b61068d6014600a610b9e565b6106979190610a6a565b90506106a38183610a52565b6005546040516370a0823160e01b81526001600160a01b03909116906370a08231906106d3903390600401610961565b60206040518083038186803b1580156106eb57600080fd5b505afa1580156106ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107239190610949565b101561072e57600080fd5b3360009081526002602052604090205461074890836108c4565b336000908152600260205260408120919091555461076690836108c4565b6000556005546001600160a01b03166323b872dd33306107868587610a52565b6040518463ffffffff1660e01b81526004016107a493929190610975565b602060405180830381600087803b1580156107be57600080fd5b505af11580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f69190610911565b505050565b600481565b6001600160a01b031660009081526003602052604090205490565b60026020526000908152604090205481565b60008061083b836001610a52565b61084690600a610ad0565b6108509086610b9e565b90506000600a6108608684610a6a565b61086b906005610a52565b6108759190610a6a565b925050505b9392505050565b60006108916008600a600161082d565b905090565b600061087a8284610bbd565b600060646108ae610200565b10905080156108c0576108c0826108d0565b5050565b600061087a8284610a52565b6001600160a01b0316600090815260026020526040812055565b6000602082840312156108fb578081fd5b81356001600160a01b038116811461087a578182fd5b600060208284031215610922578081fd5b8151801515811461087a578182fd5b600060208284031215610942578081fd5b5035919050565b60006020828403121561095a578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b602080825260139082015272496e73756666696369656e7420546f6b656e7360681b604082015260600190565b6020808252818101527f426f72726f7720416d6f756e742061626f76652044656274204365696c696e67604082015260600190565b6020808252818101527f426f72726f7720416d6f756e742041626f76652044656274204365696c696e67604082015260600190565b90815260200190565b60008219821115610a6557610a65610bd4565b500190565b600082610a8557634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611610a9c5750610ac7565b818704821115610aae57610aae610bd4565b80861615610abb57918102915b9490941c938002610a8d565b94509492505050565b600061087a6000198484600082610ae95750600161087a565b81610af65750600061087a565b8160018114610b0c5760028114610b1657610b43565b600191505061087a565b60ff841115610b2757610b27610bd4565b6001841b915084821115610b3d57610b3d610bd4565b5061087a565b5060208310610133831016604e8410600b8410161715610b76575081810a83811115610b7157610b71610bd4565b61087a565b610b838484846001610a8a565b808604821115610b9557610b95610bd4565b02949350505050565b6000816000190483118215151615610bb857610bb8610bd4565b500290565b600082821015610bcf57610bcf610bd4565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220cadea68d28fc38a32bc6bf8e1273d640a64c708e6db95c53276d21ceb99e8b7664736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 454,
        "contract": "contracts/VaultContract.sol:VaultContract",
        "label": "totalCollateral",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 456,
        "contract": "contracts/VaultContract.sol:VaultContract",
        "label": "totalBorrow",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 460,
        "contract": "contracts/VaultContract.sol:VaultContract",
        "label": "userCollateral",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 464,
        "contract": "contracts/VaultContract.sol:VaultContract",
        "label": "userBorrowed",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 467,
        "contract": "contracts/VaultContract.sol:VaultContract",
        "label": "_KhooleeToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(KhooleeCoinMinterInterface)387"
      },
      {
        "astId": 470,
        "contract": "contracts/VaultContract.sol:VaultContract",
        "label": "_mockOT",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(MockOTInterface)425"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(KhooleeCoinMinterInterface)387": {
        "encoding": "inplace",
        "label": "contract KhooleeCoinMinterInterface",
        "numberOfBytes": "20"
      },
      "t_contract(MockOTInterface)425": {
        "encoding": "inplace",
        "label": "contract MockOTInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}