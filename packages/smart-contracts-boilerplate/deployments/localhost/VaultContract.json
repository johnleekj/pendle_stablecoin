{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "khooleeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mockOT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DEBT_CEILING",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FLAT_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTEREST_PER_MONTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTEREST_PER_MONTH_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_THRESHOLD_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOAN_TO_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOAN_TO_VALUE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "addCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowKhooleeCoins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDebtCeiling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "removeCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repayDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "returnHealthFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userBorrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ee2d2db342faae13f7ef33bd1922ae7038952ac2f2a7391a2bf98dc825272ca",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "762201",
    "logsBloom": "0x
    "blockHash": "0x6782eeaefcf13481bc42f6c1351b1c6e20a7c7f7ff047ecfee38148803bdb859",
    "transactionHash": "0x4ee2d2db342faae13f7ef33bd1922ae7038952ac2f2a7391a2bf98dc825272ca",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "762201",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  ],
  "solcInputHash": "c9969103b5f122508c63cd452f308da0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"khooleeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mockOT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DEBT_CEILING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLAT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTEREST_PER_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTEREST_PER_MONTH_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_THRESHOLD_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOAN_TO_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOAN_TO_VALUE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowKhooleeCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"removeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repayDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnHealthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VaultContract.sol\":\"VaultContract\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/VaultContract.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\ninterface KhooleeCoinMinterInterface {\\n  function mint(address to, uint256 amount) external;\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function burnFrom(address account, uint256 amount) external;\\n}\\n\\ninterface MockOTInterface {\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function getStart() external view returns (uint256);\\n\\n  function getExpiry() external view returns (uint256);\\n}\\n\\ncontract VaultContract {\\n  using SafeMath for uint256;\\n\\n  uint256 public constant LOAN_TO_VALUE = 50; // 50% (max % of KLC that can be borrowed with deposited collateralAmount)\\n  uint256 public constant LOAN_TO_VALUE_PRECISION = 1e2; // 100\\n\\n  uint256 public constant LIQUIDATION_THRESHOLD = 75; // 75% (percentage at which a position is defined as under-collateralized)\\n  // collaterization rate is 100% if position is defined as under-collateralized\\n  uint256 public constant LIQUIDATION_THRESHOLD_PRECISION = 1e2; // 100\\n\\n  // this is incurred each time collateral is being added\\n  uint256 public constant FLAT_FEE = 20; // 20 usd worth of mockOT\\n\\n  // this is not being used for now\\n  uint256 public constant INTEREST_PER_MONTH = 4; // 4%\\n  uint256 public constant INTEREST_PER_MONTH_PRECISION = 1e2; // 100\\n\\n  uint256 public constant DEBT_CEILING = 20; // max amount of KLC that can be borrowed at any time\\n\\n  // Total amounts\\n  uint256 public totalCollateral; // Total collateral supplied\\n  uint256 public totalBorrow; // Total KhooleeCoin amount to be repayed by borrowers\\n\\n  // User balances\\n  mapping(address => uint256) public userCollateral; // collateral deposited by user of corresponding address\\n  mapping(address => uint256) public userBorrowed; //KhooleeCoin borrowed by user of corresponding address\\n\\n  KhooleeCoinMinterInterface _KhooleeToken;\\n  MockOTInterface _mockOT;\\n\\n  constructor(address khooleeToken, address mockOT) {\\n    _KhooleeToken = KhooleeCoinMinterInterface(khooleeToken);\\n    _mockOT = MockOTInterface(mockOT);\\n  }\\n\\n  // function mintMinerReward() public {\\n  //     _KhooleeToken.mint(block.coinbase, 1000);\\n  // }\\n\\n  function addCollateral(uint256 collateralAmount) public {\\n    uint256 flatFeeInMockOT = (FLAT_FEE * 10) / _getMockOtUSDValue();\\n    require(_mockOT.balanceOf(msg.sender) >= collateralAmount + flatFeeInMockOT);\\n    userCollateral[msg.sender] = userCollateral[msg.sender].add(collateralAmount);\\n    totalCollateral = totalCollateral.add(collateralAmount);\\n    _mockOT.transferFrom(msg.sender, address(this), collateralAmount + flatFeeInMockOT);\\n  }\\n\\n  function removeCollateral(uint256 collateralAmount) public {\\n    require(collateralAmount <= userCollateral[msg.sender]);\\n    userCollateral[msg.sender] = userCollateral[msg.sender].sub(collateralAmount);\\n    totalCollateral = totalCollateral.sub(collateralAmount);\\n    _mockOT.transfer(msg.sender, collateralAmount);\\n\\n    _liquidateWhenLiquidatableDebtPosition(msg.sender);\\n  }\\n\\n  function borrowKhooleeCoins(uint256 borrowAmount) public {\\n    // borrowed KhooleeCoins will be newly minted\\n    uint256 maxAmountThatCanBeBorrowed = (userCollateral[msg.sender] *\\n      _getMockOtUSDValue() *\\n      LOAN_TO_VALUE) /\\n      LOAN_TO_VALUE_PRECISION /\\n      10;\\n    require(\\n      borrowAmount + userBorrowed[msg.sender] <= maxAmountThatCanBeBorrowed,\\n      'Borrow Amount above Debt Ceiling'\\n    );\\n    require(\\n      totalBorrow + borrowAmount + userBorrowed[msg.sender] <= DEBT_CEILING,\\n      'Borrow Amount Above Debt Ceiling'\\n    );\\n\\n    userBorrowed[msg.sender] = userBorrowed[msg.sender].add(borrowAmount);\\n    totalBorrow = totalBorrow.add(borrowAmount);\\n    _KhooleeToken.mint(msg.sender, borrowAmount); // mints to the borrower\\n  }\\n\\n  function repayDebt() public {\\n    require(\\n      _KhooleeToken.balanceOf(msg.sender) >= userBorrowed[msg.sender],\\n      'Insufficient Tokens'\\n    );\\n    uint256 borrowAmount = userBorrowed[msg.sender];\\n\\n    // repayed stablecoins will be burnt\\n    userBorrowed[msg.sender] = 0;\\n    totalBorrow = totalBorrow.sub(borrowAmount);\\n    _KhooleeToken.burnFrom(msg.sender, userBorrowed[msg.sender]);\\n\\n    removeCollateral(userCollateral[msg.sender]);\\n  }\\n\\n  function _liquidateWhenLiquidatableDebtPosition(address addressToLiquidate) private {\\n    // if health factor < 100, can liquidate collateral\\n    // else, collateral still safe\\n    bool liquidatable = returnHealthFactor() < 100;\\n    if (liquidatable) {\\n      _liquidate(addressToLiquidate);\\n    }\\n  }\\n\\n  function _liquidate(address addressToLiquidate) private {\\n    // make the borrower no longer have access to the collateral\\n    // uint256 amountToLiquidate = userCollateral[addressToLiquidate];\\n    userCollateral[addressToLiquidate] = 0;\\n    // not sure whether to update total collateral?\\n  }\\n\\n  // if health factor < 100, can liquidate collateral\\n  // else, collateral still safe\\n  function returnHealthFactor() public view returns (uint256) {\\n    if (userBorrowed[msg.sender] == 0) return 100;\\n    uint256 a = _percent(\\n      userCollateral[msg.sender] *\\n        _getMockOtUSDValue() *\\n        _percent(LIQUIDATION_THRESHOLD, LIQUIDATION_THRESHOLD_PRECISION, 2),\\n      userBorrowed[msg.sender] * 100,\\n      2\\n    ) / 10;\\n    return a;\\n    //return ((userCollateral[msg.sender] * LIQUIDATION_THRESHOLD / LIQUIDATION_THRESHOLD_PRECISION) / userBorrowed[msg.sender] *);\\n  }\\n\\n  //======================= Helper Methods ==========================================\\n  // supposed to be oracle to get value, but this will do for now\\n  function _getMockOtUSDValue() private pure returns (uint256) {\\n    return _percent(8, 10, 1);\\n  }\\n\\n  function _percent(\\n    uint256 numerator,\\n    uint256 denominator,\\n    uint256 precision\\n  ) private pure returns (uint256 quotient) {\\n    // caution, check safe-to-multiply here\\n    uint256 _numerator = numerator * 10**(precision + 1);\\n    // with rounding of last digit\\n    uint256 _quotient = ((_numerator / denominator) + 5) / 10;\\n    return (_quotient);\\n  }\\n\\n  function getDebtCeiling() public pure returns (uint256) {\\n    return DEBT_CEILING;\\n  }\\n}\\n\",\"keccak256\":\"0xa88b3804957d71a1181e7749cb4876bea2308c2adb2074ca23585bc655db871f\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610cb3380380610cb383398101604081905261002f9161007c565b600480546001600160a01b039384166001600160a01b031991821617909155600580549290931691161790556100ae565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008e578182fd5b61009783610060565b91506100a560208401610060565b90509250929050565b610bf6806100bd6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063831a6350116100a2578063bcc46e8311610071578063bcc46e83146101b4578063c42c6e3b14610139578063c55e6adf14610171578063dda1b912146101c7578063f69f1e4a146101cf57610116565b8063831a63501461013957806390a8ae9b1461019157806394cd4ba7146101995780639a7d7813146101a157610116565b806332564042116100e9578063325640421461015e578063424f0474146101715780634ac8eb5f14610179578063788c047a146101815780638285ef401461018957610116565b8063082151e71461011b5780630f7d6bed146101395780631b99d9d6146101415780633237c1581461014b575b600080fd5b6101236101e2565b6040516101309190610a1f565b60405180910390f35b610123610272565b610149610277565b005b610149610159366004610907565b6103e1565b61014961016c366004610907565b6104c6565b610123610636565b61012361063b565b610123610641565b610123610646565b61012361064c565b610123610651565b6101236101af3660046108c0565b610656565b6101496101c2366004610907565b610668565b6101236107ec565b6101236101dd3660046108c0565b6107f1565b336000908152600360205260408120546101fe5750606461026f565b6000600a610261610213604b60646002610803565b61021b610857565b336000908152600260205260409020546102359190610b74565b61023f9190610b74565b3360009081526003602052604090205461025a906064610b74565b6002610803565b61026b9190610a40565b9150505b90565b606481565b3360008181526003602052604090819020546004805492516370a0823160e01b815291936001600160a01b03909316926370a08231926102b79201610937565b60206040518083038186803b1580156102cf57600080fd5b505afa1580156102e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610307919061091f565b101561032e5760405162461bcd60e51b815260040161032590610988565b60405180910390fd5b336000908152600360205260408120805491905560015461034f908261086c565b60015560048054336000818152600360205260409081902054905163079cc67960e41b81526001600160a01b03909316936379cc6790936103929392910161096f565b600060405180830381600087803b1580156103ac57600080fd5b505af11580156103c0573d6000803e3d6000fd5b5050336000908152600260205260409020546103de925090506103e1565b50565b336000908152600260205260409020548111156103fd57600080fd5b33600090815260026020526040902054610417908261086c565b3360009081526002602052604081209190915554610435908261086c565b60005560055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061046a903390859060040161096f565b602060405180830381600087803b15801561048457600080fd5b505af1158015610498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bc91906108e7565b506103de33610878565b6000600a606460326104d6610857565b336000908152600260205260409020546104f09190610b74565b6104fa9190610b74565b6105049190610a40565b61050e9190610a40565b33600090815260036020526040902054909150819061052d9084610a28565b111561054b5760405162461bcd60e51b8152600401610325906109b5565b336000908152600360205260409020546001546014919061056d908590610a28565b6105779190610a28565b11156105955760405162461bcd60e51b8152600401610325906109ea565b336000908152600360205260409020546105af908361089a565b336000908152600360205260409020556001546105cc908361089a565b600155600480546040516340c10f1960e01b81526001600160a01b03909116916340c10f199161060091339187910161096f565b600060405180830381600087803b15801561061a57600080fd5b505af115801561062e573d6000803e3d6000fd5b505050505050565b601481565b60005481565b603281565b60015481565b604b81565b601490565b60036020526000908152604090205481565b6000610672610857565b61067e6014600a610b74565b6106889190610a40565b90506106948183610a28565b6005546040516370a0823160e01b81526001600160a01b03909116906370a08231906106c4903390600401610937565b60206040518083038186803b1580156106dc57600080fd5b505afa1580156106f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610714919061091f565b101561071f57600080fd5b33600090815260026020526040902054610739908361089a565b3360009081526002602052604081209190915554610757908361089a565b6000556005546001600160a01b03166323b872dd33306107778587610a28565b6040518463ffffffff1660e01b81526004016107959392919061094b565b602060405180830381600087803b1580156107af57600080fd5b505af11580156107c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e791906108e7565b505050565b600481565b60026020526000908152604090205481565b600080610811836001610a28565b61081c90600a610aa6565b6108269086610b74565b90506000600a6108368684610a40565b610841906005610a28565b61084b9190610a40565b925050505b9392505050565b60006108676008600a6001610803565b905090565b60006108508284610b93565b600060646108846101e2565b109050801561089657610896826108a6565b5050565b60006108508284610a28565b6001600160a01b0316600090815260026020526040812055565b6000602082840312156108d1578081fd5b81356001600160a01b0381168114610850578182fd5b6000602082840312156108f8578081fd5b81518015158114610850578182fd5b600060208284031215610918578081fd5b5035919050565b600060208284031215610930578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b602080825260139082015272496e73756666696369656e7420546f6b656e7360681b604082015260600190565b6020808252818101527f426f72726f7720416d6f756e742061626f76652044656274204365696c696e67604082015260600190565b6020808252818101527f426f72726f7720416d6f756e742041626f76652044656274204365696c696e67604082015260600190565b90815260200190565b60008219821115610a3b57610a3b610baa565b500190565b600082610a5b57634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611610a725750610a9d565b818704821115610a8457610a84610baa565b80861615610a9157918102915b9490941c938002610a63565b94509492505050565b60006108506000198484600082610abf57506001610850565b81610acc57506000610850565b8160018114610ae25760028114610aec57610b19565b6001915050610850565b60ff841115610afd57610afd610baa565b6001841b915084821115610b1357610b13610baa565b50610850565b5060208310610133831016604e8410600b8410161715610b4c575081810a83811115610b4757610b47610baa565b610850565b610b598484846001610a60565b808604821115610b6b57610b6b610baa565b02949350505050565b6000816000190483118215151615610b8e57610b8e610baa565b500290565b600082821015610ba557610ba5610baa565b500390565b634e487b7160e01b600052601160045260246000fdfea264697066735822122092df7da13b29ebacce2d2201d826dc994f8dd490c8ee1f698223ecf10fd6534964736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063831a6350116100a2578063bcc46e8311610071578063bcc46e83146101b4578063c42c6e3b14610139578063c55e6adf14610171578063dda1b912146101c7578063f69f1e4a146101cf57610116565b8063831a63501461013957806390a8ae9b1461019157806394cd4ba7146101995780639a7d7813146101a157610116565b806332564042116100e9578063325640421461015e578063424f0474146101715780634ac8eb5f14610179578063788c047a146101815780638285ef401461018957610116565b8063082151e71461011b5780630f7d6bed146101395780631b99d9d6146101415780633237c1581461014b575b600080fd5b6101236101e2565b6040516101309190610a1f565b60405180910390f35b610123610272565b610149610277565b005b610149610159366004610907565b6103e1565b61014961016c366004610907565b6104c6565b610123610636565b61012361063b565b610123610641565b610123610646565b61012361064c565b610123610651565b6101236101af3660046108c0565b610656565b6101496101c2366004610907565b610668565b6101236107ec565b6101236101dd3660046108c0565b6107f1565b336000908152600360205260408120546101fe5750606461026f565b6000600a610261610213604b60646002610803565b61021b610857565b336000908152600260205260409020546102359190610b74565b61023f9190610b74565b3360009081526003602052604090205461025a906064610b74565b6002610803565b61026b9190610a40565b9150505b90565b606481565b3360008181526003602052604090819020546004805492516370a0823160e01b815291936001600160a01b03909316926370a08231926102b79201610937565b60206040518083038186803b1580156102cf57600080fd5b505afa1580156102e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610307919061091f565b101561032e5760405162461bcd60e51b815260040161032590610988565b60405180910390fd5b336000908152600360205260408120805491905560015461034f908261086c565b60015560048054336000818152600360205260409081902054905163079cc67960e41b81526001600160a01b03909316936379cc6790936103929392910161096f565b600060405180830381600087803b1580156103ac57600080fd5b505af11580156103c0573d6000803e3d6000fd5b5050336000908152600260205260409020546103de925090506103e1565b50565b336000908152600260205260409020548111156103fd57600080fd5b33600090815260026020526040902054610417908261086c565b3360009081526002602052604081209190915554610435908261086c565b60005560055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061046a903390859060040161096f565b602060405180830381600087803b15801561048457600080fd5b505af1158015610498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bc91906108e7565b506103de33610878565b6000600a606460326104d6610857565b336000908152600260205260409020546104f09190610b74565b6104fa9190610b74565b6105049190610a40565b61050e9190610a40565b33600090815260036020526040902054909150819061052d9084610a28565b111561054b5760405162461bcd60e51b8152600401610325906109b5565b336000908152600360205260409020546001546014919061056d908590610a28565b6105779190610a28565b11156105955760405162461bcd60e51b8152600401610325906109ea565b336000908152600360205260409020546105af908361089a565b336000908152600360205260409020556001546105cc908361089a565b600155600480546040516340c10f1960e01b81526001600160a01b03909116916340c10f199161060091339187910161096f565b600060405180830381600087803b15801561061a57600080fd5b505af115801561062e573d6000803e3d6000fd5b505050505050565b601481565b60005481565b603281565b60015481565b604b81565b601490565b60036020526000908152604090205481565b6000610672610857565b61067e6014600a610b74565b6106889190610a40565b90506106948183610a28565b6005546040516370a0823160e01b81526001600160a01b03909116906370a08231906106c4903390600401610937565b60206040518083038186803b1580156106dc57600080fd5b505afa1580156106f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610714919061091f565b101561071f57600080fd5b33600090815260026020526040902054610739908361089a565b3360009081526002602052604081209190915554610757908361089a565b6000556005546001600160a01b03166323b872dd33306107778587610a28565b6040518463ffffffff1660e01b81526004016107959392919061094b565b602060405180830381600087803b1580156107af57600080fd5b505af11580156107c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e791906108e7565b505050565b600481565b60026020526000908152604090205481565b600080610811836001610a28565b61081c90600a610aa6565b6108269086610b74565b90506000600a6108368684610a40565b610841906005610a28565b61084b9190610a40565b925050505b9392505050565b60006108676008600a6001610803565b905090565b60006108508284610b93565b600060646108846101e2565b109050801561089657610896826108a6565b5050565b60006108508284610a28565b6001600160a01b0316600090815260026020526040812055565b6000602082840312156108d1578081fd5b81356001600160a01b0381168114610850578182fd5b6000602082840312156108f8578081fd5b81518015158114610850578182fd5b600060208284031215610918578081fd5b5035919050565b600060208284031215610930578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b602080825260139082015272496e73756666696369656e7420546f6b656e7360681b604082015260600190565b6020808252818101527f426f72726f7720416d6f756e742061626f76652044656274204365696c696e67604082015260600190565b6020808252818101527f426f72726f7720416d6f756e742041626f76652044656274204365696c696e67604082015260600190565b90815260200190565b60008219821115610a3b57610a3b610baa565b500190565b600082610a5b57634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611610a725750610a9d565b818704821115610a8457610a84610baa565b80861615610a9157918102915b9490941c938002610a63565b94509492505050565b60006108506000198484600082610abf57506001610850565b81610acc57506000610850565b8160018114610ae25760028114610aec57610b19565b6001915050610850565b60ff841115610afd57610afd610baa565b6001841b915084821115610b1357610b13610baa565b50610850565b5060208310610133831016604e8410600b8410161715610b4c575081810a83811115610b4757610b47610baa565b610850565b610b598484846001610a60565b808604821115610b6b57610b6b610baa565b02949350505050565b6000816000190483118215151615610b8e57610b8e610baa565b500290565b600082821015610ba557610ba5610baa565b500390565b634e487b7160e01b600052601160045260246000fdfea264697066735822122092df7da13b29ebacce2d2201d826dc994f8dd490c8ee1f698223ecf10fd6534964736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 454,
        "contract": "contracts/VaultContract.sol:VaultContract",
        "label": "totalCollateral",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 456,
        "contract": "contracts/VaultContract.sol:VaultContract",
        "label": "totalBorrow",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 460,
        "contract": "contracts/VaultContract.sol:VaultContract",
        "label": "userCollateral",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 464,
        "contract": "contracts/VaultContract.sol:VaultContract",
        "label": "userBorrowed",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 467,
        "contract": "contracts/VaultContract.sol:VaultContract",
        "label": "_KhooleeToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(KhooleeCoinMinterInterface)387"
      },
      {
        "astId": 470,
        "contract": "contracts/VaultContract.sol:VaultContract",
        "label": "_mockOT",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(MockOTInterface)425"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(KhooleeCoinMinterInterface)387": {
        "encoding": "inplace",
        "label": "contract KhooleeCoinMinterInterface",
        "numberOfBytes": "20"
      },
      "t_contract(MockOTInterface)425": {
        "encoding": "inplace",
        "label": "contract MockOTInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}