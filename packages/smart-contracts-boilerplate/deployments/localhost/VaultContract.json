{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "khooleeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mockOT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "addCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowKhooleeCoins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDebtCeiling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "removeCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repayDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "returnHealthFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userBorrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7183e965b081000efc23f6f7c0130e56bb86780ddcaa90fd92ff567837892b14",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "721554",
    "logsBloom": "0x
    "blockHash": "0xa57b68b395869e7e18b22b7cc603dcfdece284ea98ff330d8692f294334190ab",
    "transactionHash": "0x7183e965b081000efc23f6f7c0130e56bb86780ddcaa90fd92ff567837892b14",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "721554",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  ],
  "solcInputHash": "6a995e528a6504dd2ce2854901881721",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"khooleeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mockOT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowKhooleeCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"removeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repayDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnHealthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VaultContract.sol\":\"VaultContract\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/VaultContract.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\ninterface KhooleeCoinMinterInterface {\\n  function mint(address to, uint256 amount) external;\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function burnFrom(address account, uint256 amount) external;\\n}\\n\\ninterface MockOTInterface {\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function getStart() external view returns (uint256);\\n\\n  function getExpiry() external view returns (uint256);\\n}\\n\\ncontract VaultContract {\\n  using SafeMath for uint256;\\n\\n  uint256 private constant LOAN_TO_VALUE = 50; // 50% (max % of KLC that can be borrowed with deposited collateralAmount)\\n  uint256 private constant LOAN_TO_VALUE_PRECISION = 1e2; // 100\\n\\n  uint256 private constant LIQUIDATION_THRESHOLD = 75; // 75% (percentage at which a position is defined as under-collateralized)\\n  // collaterization rate is 100% if position is defined as under-collateralized\\n  uint256 private constant LIQUIDATION_THRESHOLD_PRECISION = 1e2; // 100\\n\\n  // this is incurred each time collateral is being added\\n  uint256 private constant FLAT_FEE = 20; // 20 usd worth of mockOT\\n\\n  // this is not being used for now\\n  uint256 private constant INTEREST_PER_MONTH = 4; // 4%\\n  uint256 private constant INTEREST_PER_MONTH_precision = 1e2; // 100\\n\\n  uint256 private constant DEBT_CEILING = 20; // max amount of KLC that can be borrowed at any time\\n\\n  // Total amounts\\n  uint256 public totalCollateral; // Total collateral supplied\\n  uint256 public totalBorrow; // Total KhooleeCoin amount to be repayed by borrowers\\n\\n  // User balances\\n  mapping(address => uint256) public userCollateral; // collateral deposited by user of corresponding address\\n  mapping(address => uint256) public userBorrowed; //KhooleeCoin borrowed by user of corresponding address\\n\\n  KhooleeCoinMinterInterface _KhooleeToken;\\n  MockOTInterface _mockOT;\\n\\n  constructor(address khooleeToken, address mockOT) {\\n    _KhooleeToken = KhooleeCoinMinterInterface(khooleeToken);\\n    _mockOT = MockOTInterface(mockOT);\\n  }\\n\\n  // function mintMinerReward() public {\\n  //     _KhooleeToken.mint(block.coinbase, 1000);\\n  // }\\n\\n  function addCollateral(uint256 collateralAmount) public {\\n    uint256 flatFeeInMockOT = (FLAT_FEE * 10) / _getMockOtUSDValue();\\n    require(_mockOT.balanceOf(msg.sender) >= collateralAmount + flatFeeInMockOT);\\n    _mockOT.transferFrom(msg.sender, address(this), collateralAmount + flatFeeInMockOT);\\n    userCollateral[msg.sender] = userCollateral[msg.sender].add(collateralAmount);\\n    totalCollateral = totalCollateral.add(collateralAmount);\\n  }\\n\\n  function removeCollateral(uint256 collateralAmount) public {\\n    require(collateralAmount <= userCollateral[msg.sender]);\\n    _mockOT.transfer(msg.sender, collateralAmount);\\n    userCollateral[msg.sender] = userCollateral[msg.sender].sub(collateralAmount);\\n    totalCollateral = totalCollateral.sub(collateralAmount);\\n\\n    _liquidateWhenLiquidatableDebtPosition(msg.sender);\\n  }\\n\\n  function borrowKhooleeCoins(uint256 borrowAmount) public {\\n    // borrowed KhooleeCoins will be newly minted\\n    uint256 maxAmountThatCanBeBorrowed = (userCollateral[msg.sender] *\\n      _getMockOtUSDValue() *\\n      LOAN_TO_VALUE) /\\n      LOAN_TO_VALUE_PRECISION /\\n      10;\\n    require(\\n      borrowAmount + userBorrowed[msg.sender] <= maxAmountThatCanBeBorrowed,\\n      'Borrow Amount above Debt Ceiling'\\n    );\\n    require(\\n      totalBorrow + borrowAmount + userBorrowed[msg.sender] <= DEBT_CEILING,\\n      'Borrow Amount Above Debt Ceiling'\\n    );\\n\\n    _KhooleeToken.mint(msg.sender, borrowAmount); // mints to the borrower\\n    userBorrowed[msg.sender] = userBorrowed[msg.sender].add(borrowAmount);\\n    totalBorrow = totalBorrow.add(borrowAmount);\\n  }\\n\\n  function repayDebt() public {\\n    require(\\n      _KhooleeToken.balanceOf(msg.sender) >= userBorrowed[msg.sender],\\n      'Insufficient Tokens'\\n    );\\n    uint256 borrowAmount = userBorrowed[msg.sender];\\n\\n    // repayed stablecoins will be burnt\\n    _KhooleeToken.burnFrom(msg.sender, userBorrowed[msg.sender]);\\n    userBorrowed[msg.sender] = 0;\\n    totalBorrow = totalBorrow.sub(borrowAmount);\\n\\n    removeCollateral(userCollateral[msg.sender]);\\n  }\\n\\n  function _liquidateWhenLiquidatableDebtPosition(address addressToLiquidate) private {\\n    // if health factor < 100, can liquidate collateral\\n    // else, collateral still safe\\n    bool liquidatable = returnHealthFactor() < 100;\\n    if (liquidatable) {\\n      _liquidate(addressToLiquidate);\\n    }\\n  }\\n\\n  function _liquidate(address addressToLiquidate) private {\\n    // make the borrower no longer have access to the collateral\\n    // uint256 amountToLiquidate = userCollateral[addressToLiquidate];\\n    userCollateral[addressToLiquidate] = 0;\\n    // not sure whether to update total collateral?\\n  }\\n\\n  // if health factor < 100, can liquidate collateral\\n  // else, collateral still safe\\n  function returnHealthFactor() public view returns (uint256) {\\n    if (userBorrowed[msg.sender] == 0) return 100;\\n    uint256 a = _percent(\\n      userCollateral[msg.sender] *\\n        _getMockOtUSDValue() *\\n        _percent(LIQUIDATION_THRESHOLD, LIQUIDATION_THRESHOLD_PRECISION, 2),\\n      userBorrowed[msg.sender] * 100,\\n      2\\n    ) / 10;\\n    return a;\\n    //return ((userCollateral[msg.sender] * LIQUIDATION_THRESHOLD / LIQUIDATION_THRESHOLD_PRECISION) / userBorrowed[msg.sender] *);\\n  }\\n\\n  //======================= Helper Methods ==========================================\\n  // supposed to be oracle to get value, but this will do for now\\n  function _getMockOtUSDValue() private pure returns (uint256) {\\n    return _percent(8, 10, 1);\\n  }\\n\\n  function _percent(\\n    uint256 numerator,\\n    uint256 denominator,\\n    uint256 precision\\n  ) private pure returns (uint256 quotient) {\\n    // caution, check safe-to-multiply here\\n    uint256 _numerator = numerator * 10**(precision + 1);\\n    // with rounding of last digit\\n    uint256 _quotient = ((_numerator / denominator) + 5) / 10;\\n    return (_quotient);\\n  }\\n\\n  function getDebtCeiling() public pure returns (uint256) {\\n    return DEBT_CEILING;\\n  }\\n}\\n\",\"keccak256\":\"0x7db05d59c3d383935973b6f373bd6a0b8e84b251f63a04e6e1baae1e623e5c13\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610bf8380380610bf883398101604081905261002f9161007c565b600480546001600160a01b039384166001600160a01b031991821617909155600580549290931691161790556100ae565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008e578182fd5b61009783610060565b91506100a560208401610060565b90509250929050565b610b3b806100bd6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638285ef40116100665780638285ef40146100f957806394cd4ba7146101015780639a7d781314610109578063bcc46e831461011c578063f69f1e4a1461012f5761009e565b8063082151e7146100a35780631b99d9d6146100c15780633237c158146100cb57806332564042146100de5780634ac8eb5f146100f1575b600080fd5b6100ab610142565b6040516100b89190610964565b60405180910390f35b6100c96101d2565b005b6100c96100d936600461084c565b610339565b6100c96100ec36600461084c565b61041e565b6100ab61058f565b6100ab610595565b6100ab61059b565b6100ab610117366004610805565b6105a0565b6100c961012a36600461084c565b6105b2565b6100ab61013d366004610805565b610736565b3360009081526003602052604081205461015e575060646101cf565b6000600a6101c1610173604b60646002610748565b61017b61079c565b336000908152600260205260409020546101959190610ab9565b61019f9190610ab9565b336000908152600360205260409020546101ba906064610ab9565b6002610748565b6101cb9190610985565b9150505b90565b3360008181526003602052604090819020546004805492516370a0823160e01b815291936001600160a01b03909316926370a0823192610212920161087c565b60206040518083038186803b15801561022a57600080fd5b505afa15801561023e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102629190610864565b10156102895760405162461bcd60e51b8152600401610280906108cd565b60405180910390fd5b33600081815260036020526040908190205460048054925163079cc67960e41b815291936001600160a01b03909316926379cc6790926102cb928691016108b4565b600060405180830381600087803b1580156102e557600080fd5b505af11580156102f9573d6000803e3d6000fd5b505033600090815260036020526040812055505060015461031a90826107b1565b6001553360009081526002602052604090205461033690610339565b50565b3360009081526002602052604090205481111561035557600080fd5b60055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061038790339085906004016108b4565b602060405180830381600087803b1580156103a157600080fd5b505af11580156103b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d9919061082c565b50336000908152600260205260409020546103f490826107b1565b336000908152600260205260408120919091555461041290826107b1565b600055610336336107bd565b6000600a6064603261042e61079c565b336000908152600260205260409020546104489190610ab9565b6104529190610ab9565b61045c9190610985565b6104669190610985565b336000908152600360205260409020549091508190610485908461096d565b11156104a35760405162461bcd60e51b8152600401610280906108fa565b33600090815260036020526040902054600154601491906104c590859061096d565b6104cf919061096d565b11156104ed5760405162461bcd60e51b81526004016102809061092f565b600480546040516340c10f1960e01b81526001600160a01b03909116916340c10f199161051e9133918791016108b4565b600060405180830381600087803b15801561053857600080fd5b505af115801561054c573d6000803e3d6000fd5b50503360009081526003602052604090205461056b92509050836107df565b3360009081526003602052604090205560015461058890836107df565b6001555050565b60005481565b60015481565b601490565b60036020526000908152604090205481565b60006105bc61079c565b6105c86014600a610ab9565b6105d29190610985565b90506105de818361096d565b6005546040516370a0823160e01b81526001600160a01b03909116906370a082319061060e90339060040161087c565b60206040518083038186803b15801561062657600080fd5b505afa15801561063a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065e9190610864565b101561066957600080fd5b6005546001600160a01b03166323b872dd3330610686858761096d565b6040518463ffffffff1660e01b81526004016106a493929190610890565b602060405180830381600087803b1580156106be57600080fd5b505af11580156106d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f6919061082c565b503360009081526002602052604090205461071190836107df565b336000908152600260205260408120919091555461072f90836107df565b6000555050565b60026020526000908152604090205481565b60008061075683600161096d565b61076190600a6109eb565b61076b9086610ab9565b90506000600a61077b8684610985565b61078690600561096d565b6107909190610985565b925050505b9392505050565b60006107ac6008600a6001610748565b905090565b60006107958284610ad8565b600060646107c9610142565b10905080156107db576107db826107eb565b5050565b6000610795828461096d565b6001600160a01b0316600090815260026020526040812055565b600060208284031215610816578081fd5b81356001600160a01b0381168114610795578182fd5b60006020828403121561083d578081fd5b81518015158114610795578182fd5b60006020828403121561085d578081fd5b5035919050565b600060208284031215610875578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b602080825260139082015272496e73756666696369656e7420546f6b656e7360681b604082015260600190565b6020808252818101527f426f72726f7720416d6f756e742061626f76652044656274204365696c696e67604082015260600190565b6020808252818101527f426f72726f7720416d6f756e742041626f76652044656274204365696c696e67604082015260600190565b90815260200190565b6000821982111561098057610980610aef565b500190565b6000826109a057634e487b7160e01b81526012600452602481fd5b500490565b80825b60018086116109b757506109e2565b8187048211156109c9576109c9610aef565b808616156109d657918102915b9490941c9380026109a8565b94509492505050565b60006107956000198484600082610a0457506001610795565b81610a1157506000610795565b8160018114610a275760028114610a3157610a5e565b6001915050610795565b60ff841115610a4257610a42610aef565b6001841b915084821115610a5857610a58610aef565b50610795565b5060208310610133831016604e8410600b8410161715610a91575081810a83811115610a8c57610a8c610aef565b610795565b610a9e84848460016109a5565b808604821115610ab057610ab0610aef565b02949350505050565b6000816000190483118215151615610ad357610ad3610aef565b500290565b600082821015610aea57610aea610aef565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220943327a880a3db3767c4e114402e68e7f0406d655baca0e2918575740d71c4a864736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80638285ef40116100665780638285ef40146100f957806394cd4ba7146101015780639a7d781314610109578063bcc46e831461011c578063f69f1e4a1461012f5761009e565b8063082151e7146100a35780631b99d9d6146100c15780633237c158146100cb57806332564042146100de5780634ac8eb5f146100f1575b600080fd5b6100ab610142565b6040516100b89190610964565b60405180910390f35b6100c96101d2565b005b6100c96100d936600461084c565b610339565b6100c96100ec36600461084c565b61041e565b6100ab61058f565b6100ab610595565b6100ab61059b565b6100ab610117366004610805565b6105a0565b6100c961012a36600461084c565b6105b2565b6100ab61013d366004610805565b610736565b3360009081526003602052604081205461015e575060646101cf565b6000600a6101c1610173604b60646002610748565b61017b61079c565b336000908152600260205260409020546101959190610ab9565b61019f9190610ab9565b336000908152600360205260409020546101ba906064610ab9565b6002610748565b6101cb9190610985565b9150505b90565b3360008181526003602052604090819020546004805492516370a0823160e01b815291936001600160a01b03909316926370a0823192610212920161087c565b60206040518083038186803b15801561022a57600080fd5b505afa15801561023e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102629190610864565b10156102895760405162461bcd60e51b8152600401610280906108cd565b60405180910390fd5b33600081815260036020526040908190205460048054925163079cc67960e41b815291936001600160a01b03909316926379cc6790926102cb928691016108b4565b600060405180830381600087803b1580156102e557600080fd5b505af11580156102f9573d6000803e3d6000fd5b505033600090815260036020526040812055505060015461031a90826107b1565b6001553360009081526002602052604090205461033690610339565b50565b3360009081526002602052604090205481111561035557600080fd5b60055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061038790339085906004016108b4565b602060405180830381600087803b1580156103a157600080fd5b505af11580156103b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d9919061082c565b50336000908152600260205260409020546103f490826107b1565b336000908152600260205260408120919091555461041290826107b1565b600055610336336107bd565b6000600a6064603261042e61079c565b336000908152600260205260409020546104489190610ab9565b6104529190610ab9565b61045c9190610985565b6104669190610985565b336000908152600360205260409020549091508190610485908461096d565b11156104a35760405162461bcd60e51b8152600401610280906108fa565b33600090815260036020526040902054600154601491906104c590859061096d565b6104cf919061096d565b11156104ed5760405162461bcd60e51b81526004016102809061092f565b600480546040516340c10f1960e01b81526001600160a01b03909116916340c10f199161051e9133918791016108b4565b600060405180830381600087803b15801561053857600080fd5b505af115801561054c573d6000803e3d6000fd5b50503360009081526003602052604090205461056b92509050836107df565b3360009081526003602052604090205560015461058890836107df565b6001555050565b60005481565b60015481565b601490565b60036020526000908152604090205481565b60006105bc61079c565b6105c86014600a610ab9565b6105d29190610985565b90506105de818361096d565b6005546040516370a0823160e01b81526001600160a01b03909116906370a082319061060e90339060040161087c565b60206040518083038186803b15801561062657600080fd5b505afa15801561063a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065e9190610864565b101561066957600080fd5b6005546001600160a01b03166323b872dd3330610686858761096d565b6040518463ffffffff1660e01b81526004016106a493929190610890565b602060405180830381600087803b1580156106be57600080fd5b505af11580156106d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f6919061082c565b503360009081526002602052604090205461071190836107df565b336000908152600260205260408120919091555461072f90836107df565b6000555050565b60026020526000908152604090205481565b60008061075683600161096d565b61076190600a6109eb565b61076b9086610ab9565b90506000600a61077b8684610985565b61078690600561096d565b6107909190610985565b925050505b9392505050565b60006107ac6008600a6001610748565b905090565b60006107958284610ad8565b600060646107c9610142565b10905080156107db576107db826107eb565b5050565b6000610795828461096d565b6001600160a01b0316600090815260026020526040812055565b600060208284031215610816578081fd5b81356001600160a01b0381168114610795578182fd5b60006020828403121561083d578081fd5b81518015158114610795578182fd5b60006020828403121561085d578081fd5b5035919050565b600060208284031215610875578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b602080825260139082015272496e73756666696369656e7420546f6b656e7360681b604082015260600190565b6020808252818101527f426f72726f7720416d6f756e742061626f76652044656274204365696c696e67604082015260600190565b6020808252818101527f426f72726f7720416d6f756e742041626f76652044656274204365696c696e67604082015260600190565b90815260200190565b6000821982111561098057610980610aef565b500190565b6000826109a057634e487b7160e01b81526012600452602481fd5b500490565b80825b60018086116109b757506109e2565b8187048211156109c9576109c9610aef565b808616156109d657918102915b9490941c9380026109a8565b94509492505050565b60006107956000198484600082610a0457506001610795565b81610a1157506000610795565b8160018114610a275760028114610a3157610a5e565b6001915050610795565b60ff841115610a4257610a42610aef565b6001841b915084821115610a5857610a58610aef565b50610795565b5060208310610133831016604e8410600b8410161715610a91575081810a83811115610a8c57610a8c610aef565b610795565b610a9e84848460016109a5565b808604821115610ab057610ab0610aef565b02949350505050565b6000816000190483118215151615610ad357610ad3610aef565b500290565b600082821015610aea57610aea610aef565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220943327a880a3db3767c4e114402e68e7f0406d655baca0e2918575740d71c4a864736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 454,
        "contract": "contracts/VaultContract.sol:VaultContract",
        "label": "totalCollateral",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 456,
        "contract": "contracts/VaultContract.sol:VaultContract",
        "label": "totalBorrow",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 460,
        "contract": "contracts/VaultContract.sol:VaultContract",
        "label": "userCollateral",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 464,
        "contract": "contracts/VaultContract.sol:VaultContract",
        "label": "userBorrowed",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 467,
        "contract": "contracts/VaultContract.sol:VaultContract",
        "label": "_KhooleeToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(KhooleeCoinMinterInterface)387"
      },
      {
        "astId": 470,
        "contract": "contracts/VaultContract.sol:VaultContract",
        "label": "_mockOT",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(MockOTInterface)425"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(KhooleeCoinMinterInterface)387": {
        "encoding": "inplace",
        "label": "contract KhooleeCoinMinterInterface",
        "numberOfBytes": "20"
      },
      "t_contract(MockOTInterface)425": {
        "encoding": "inplace",
        "label": "contract MockOTInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}